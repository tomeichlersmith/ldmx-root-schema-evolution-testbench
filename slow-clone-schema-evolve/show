#!/bin/sh

set -o errexit

echo "Building example programs..."
cmake -B build -S .
cmake --build build

if [ -d data ]; then
  rm -r data
fi
mkdir data

echo "\nwrite/read/copy cycles work within schema version 1"
echo "Writing Header V1 to file..."
./build/write-v1 data/v1-output.root
echo "Contents of v1-output:"
./build/read-v1 data/v1-output.root
echo "Copying v1-output with v1:"
./build/copy-v1 data/v1-output.root data/v1-copy-v1-output.root
echo "Contents of v1-copy-v1-output:"
./build/read-v1 data/v1-copy-v1-output.root

echo "\nwrite/read/copy cycles work within schema version 2"
echo "Writing Header V2 to file..."
./build/write-v2 data/v2-output.root
echo "Contents of v2-output:"
./build/read-v2 data/v2-output.root
echo "Copying v2-output with v2:"
./build/copy-v2 data/v2-output.root data/v2-copy-v2-output.root
echo "Contents of v2-copy-v2-output:"
./build/read-v2 data/v2-copy-v2-output.root

echo "\nforcing schema evolution during copying seems to require manually syncing the addresses"
echo "Copying v1-output with v2:"
./build/copy-v2 data/v1-output.root data/v2-copy-v1-output.root

echo "\nlook at contents of output copied files"
echo "Contents of v1-output according to v2:"
./build/read-v2 data/v1-output.root
echo "Contents of v2-copy-v1-output according to v2:"
./build/read-v2 data/v2-copy-v1-output.root

echo "\nif output file is written by v2 its not readable by v1"
echo "Contents of v2-copy-v1-output according to v1:"
./build/read-v1 data/v2-copy-v1-output.root

echo "\ncopying one branch that is read and one that is not read"
echo "writing two branches of v1"
./build/write-v1 data/v1-output-double.root write-double
echo "copy with v2, reading only one branch while copying"
./build/copy-v2 data/v1-output-double.root data/v2-copy-v1-output-double.root
echo "read branch that was read while copying with v2"
./build/read-v2 data/v2-copy-v1-output-double.root header
echo "read branch that was not read while copying with v2"
./build/read-v2 data/v2-copy-v1-output-double.root header-cp
